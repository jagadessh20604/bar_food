name: Build Android APK with Docker

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build_apk:
    runs-on: ubuntu-latest # Use latest for Docker build capabilities

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Create Dockerfile
      run: |
        cat <<'EOF' > Dockerfile
        # Use Ubuntu 20.04 LTS as it's known to be stable for Android builds
        FROM ubuntu:20.04

        # Avoid interactive prompts during package installation
        ENV DEBIAN_FRONTEND=noninteractive

        # Install basic utilities and Python 3.9 prerequisites
        RUN apt-get update && apt-get install -y --no-install-recommends \
            software-properties-common \
            wget \
            unzip \
            git \
            build-essential \
            ccache \
            && add-apt-repository ppa:deadsnakes/ppa && apt-get update \
            && apt-get install -y --no-install-recommends \
            python3.9 \
            python3.9-dev \
            python3.9-venv \
            python3-pip \
            # Clean up apt cache
            && apt-get clean \
            && rm -rf /var/lib/apt/lists/*

        # Make python3.9 the default python3
        RUN update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.9 1
        RUN update-alternatives --set python3 /usr/bin/python3.9

        # Install OpenJDK 11 (required by Android SDK tools)
        RUN apt-get update && apt-get install -y --no-install-recommends \
            openjdk-11-jdk \
            # Clean up apt cache
            && apt-get clean \
            && rm -rf /var/lib/apt/lists/*
        ENV JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64
        ENV PATH="${JAVA_HOME}/bin:${PATH}"

        # Install Android/Kivy/Buildozer system dependencies
        RUN apt-get update && apt-get install -y --no-install-recommends \
            libffi-dev \
            libssl-dev \
            ffmpeg \
            libsdl2-dev \
            libsdl2-image-dev \
            libsdl2-mixer-dev \
            libsdl2-ttf-dev \
            libportmidi-dev \
            libswscale-dev \
            libavformat-dev \
            libavcodec-dev \
            zlib1g-dev \
            libunwind-dev \
            libgstreamer1.0-dev \
            gstreamer1.0-tools \
            gstreamer1.0-plugins-base \
            gstreamer1.0-plugins-good \
            libpq-dev \
            autoconf \
            automake \
            libtool \
            pkg-config \
            libncurses5-dev \
            libncursesw5-dev \
            libtinfo-dev \
            cmake \
            libltdl-dev \
            libtool-bin \
            # Clean up apt cache
            && apt-get clean \
            && rm -rf /var/lib/apt/lists/*

        # Upgrade pip and install Python packages
        RUN python3 -m pip install --upgrade pip
        RUN python3 -m pip install --upgrade --no-cache-dir \
            Cython==0.29.33 \
            buildozer \
            kivy \
            Pillow \
            python-for-android==2024.1.21 # Use the latest stable p4a

        # Set up a non-root user (good practice for containers)
        RUN useradd -ms /bin/bash builduser
        USER builduser
        WORKDIR /home/builduser/app

        # Set up environment variables for build tools
        ENV LIBTOOLIZE=/usr/bin/libtoolize
        ENV ACLOCAL=/usr/bin/aclocal
        ENV AUTOMAKE=/usr/bin/automake
        ENV AUTOCONF=/usr/bin/autoconf
        ENV PATH="/home/builduser/.local/bin:${PATH}"

        # Copy buildozer spec and main.py placeholder logic
        COPY --chown=builduser:builduser buildozer.spec .
        COPY --chown=builduser:builduser main.py .
        
        # Default command (optional, can be overridden)
        # CMD ["buildozer", "android", "debug", "log_level=2"]
        EOF

    - name: Prepare buildozer.spec and main.py for Docker context
      run: |
        # Create buildozer.spec if it doesn't exist
        if [ ! -f "buildozer.spec" ]; then
          buildozer init
        fi

        # Update buildozer.spec (use | as sed delimiter due to paths)
        sed -i 's|^#?android.sdk_path = .*|android.sdk_path = /home/builduser/.buildozer/android/platform/android-sdk|' buildozer.spec
        sed -i 's|^#?android.ndk_path = .*|android.ndk_path = /home/builduser/.buildozer/android/platform/android-ndk-r25b|' buildozer.spec
        sed -i 's|^#?android.api = .*|android.api = 31|' buildozer.spec
        sed -i 's|^#?android.minapi = .*|android.minapi = 21|' buildozer.spec
        sed -i 's|^#?android.ndk = .*|android.ndk = 25b|' buildozer.spec
        
        # Explicitly set requirements
        if ! grep -q "^requirements =" buildozer.spec; then
          echo "requirements = python3,kivy,pillow" >> buildozer.spec
        else
          sed -i 's|^requirements = .*|requirements = python3,kivy,pillow|' buildozer.spec
        fi

        # Set app title and package name
        sed -i 's|^#?title = .*|title = Bangalore Food Finder|' buildozer.spec
        sed -i 's|^#?package.name = .*|package.name = foodfinder|' buildozer.spec
        sed -i 's|^#?source.dir = .*|source.dir = .|' buildozer.spec
        sed -i 's|^#?source.include_exts = .*|source.include_exts = py,png,jpg,kv,atlas,json,pem|' buildozer.spec
        
        # Create a placeholder Kivy main.py if needed
        if [ ! -f "main.py" ]; then
          echo "Creating placeholder main.py for Docker context"
          echo "from kivy.app import App" > main.py
          echo "from kivy.uix.label import Label" >> main.py
          echo "" >> main.py
          echo "class FoodFinderApp(App):" >> main.py
          echo "    def build(self):" >> main.py
          echo "        return Label(text='Food Finder App (Kivy - Docker)')" >> main.py
          echo "" >> main.py
          echo "if __name__ == '__main__':" >> main.py
          echo "    FoodFinderApp().run()" >> main.py
        fi
        
    - name: Login to GitHub Container Registry (Optional, for caching)
      # If you want faster builds by caching the Docker image layer,
      # you might need to log in to a container registry.
      # uses: docker/login-action@v2
      # with:
      #   registry: ghcr.io
      #   username: ${{ github.actor }}
      #   password: ${{ secrets.GITHUB_TOKEN }}
      run: echo "Skipping Docker login for now"

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: false # Don't push the image
        tags: foodfinder-build:latest
        load: true # Load image into docker daemon for use in next step
        cache-from: type=gha # Enable GitHub Actions cache for Docker layers
        cache-to: type=gha,mode=max # Cache to GitHub Actions cache
        
    - name: Build APK inside Docker container
      run: |
        # Run buildozer inside the container
        # Mount the current directory (source code) into /home/builduser/app in the container
        # Pass the TOGETHER_API_KEY as an environment variable
        docker run --rm \
          -v "$(pwd)":/home/builduser/app \
          -e TOGETHER_API_KEY="${{ secrets.TOGETHER_API_KEY }}" \
          foodfinder-build:latest \
          bash -c "buildozer android debug log_level=2"
          
    - name: Check for APK
      run: |
        # APK is generated inside the container but mapped to the host's bin directory
        if [ -z "$(find bin -name '*.apk' 2>/dev/null)" ]; then
          echo "APK file not found! Check Docker build logs."
          ls -la bin/ || echo "bin directory does not exist or is empty"
          exit 1
        else
          echo "APK file found:"
          find bin -name "*.apk"
        fi

    - name: Upload APK
      uses: actions/upload-artifact@v4
      with:
        name: app-debug
        path: bin/*.apk

    # Note: Uploading logs from inside the container on failure is more complex.
    # We rely on the Docker build logs in the Actions output for now. 