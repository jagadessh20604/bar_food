name: Build Android APK

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y software-properties-common
        sudo add-apt-repository universe
        sudo apt-get update
        sudo apt-get install -y \
          python3-pip \
          build-essential \
          git \
          python3 \
          python3-dev \
          ffmpeg \
          libsdl2-dev \
          libsdl2-image-dev \
          libsdl2-mixer-dev \
          libsdl2-ttf-dev \
          libportmidi-dev \
          libswscale-dev \
          libavformat-dev \
          libavcodec-dev \
          zlib1g-dev \
          libunwind-dev \
          libgstreamer1.0-dev \
          gstreamer1.0-tools \
          gstreamer1.0-plugins-base \
          gstreamer1.0-plugins-good \
          libpq-dev \
          openjdk-11-jdk \
          autoconf \
          automake \
          libtool \
          pkg-config \
          libncurses5-dev \
          libncursesw5-dev \
          libtinfo-dev \
          cmake \
          wget \
          unzip \
          libffi-dev \
          libssl-dev
        
        # Install libtool and its dependencies
        sudo apt-get install -y libltdl-dev
        sudo apt-get install -y libtool-bin
        
        # Verify git installation
        git --version
    
    - name: Install Buildozer, Core Python dependencies, and p4a from master
      run: |
        python -m pip install --upgrade pip
        # Install p4a directly from the master branch on GitHub
        pip install --upgrade Cython==0.29.33 buildozer kivy Pillow git+https://github.com/kivy/python-for-android.git
        # NOTE: We are NOT installing from requirements.txt here for the build environment
        # Buildozer will handle Android dependencies based on buildozer.spec
    
    - name: Prepare buildozer configuration
      run: |
        # Create buildozer.spec if it doesn't exist
        if [ ! -f "buildozer.spec" ]; then
          buildozer init
        fi
        
        # Update buildozer.spec
        sed -i 's|^#?android.sdk_path = .*|android.sdk_path = ~/.buildozer/android/platform/android-sdk|' buildozer.spec
        sed -i 's|^#?android.ndk_path = .*|android.ndk_path = ~/.buildozer/android/platform/android-ndk-r25b|' buildozer.spec
        sed -i 's|^#?android.api = .*|android.api = 31|' buildozer.spec
        sed -i 's|^#?android.minapi = .*|android.minapi = 21|' buildozer.spec
        sed -i 's|^#?android.ndk = .*|android.ndk = 25b|' buildozer.spec
        
        # Explicitly set requirements compatible with Kivy/Buildozer
        if ! grep -q "requirements =" buildozer.spec; then
          echo "requirements = python3,kivy,pillow" >> buildozer.spec
        else
          sed -i 's|requirements = .*|requirements = python3,kivy,pillow|' buildozer.spec
        fi
        
        # Set app title and package name
        sed -i 's|^#?title = .*|title = Bangalore Food Finder|' buildozer.spec
        sed -i 's|^#?package.name = .*|package.name = foodfinder|' buildozer.spec
        
        # Set source.dir
        sed -i 's|^#?source.dir = .*|source.dir = .|' buildozer.spec
        
        # Set the main file and include extensions
        sed -i 's|^#?source.include_exts = .*|source.include_exts = py,png,jpg,kv,atlas,json,pem|' buildozer.spec
        
        # Create a placeholder Kivy main.py if it doesn't exist
        if [ ! -f "main.py" ]; then
          echo "from kivy.app import App" > main.py
          echo "from kivy.uix.label import Label" >> main.py
          echo "" >> main.py
          echo "class FoodFinderApp(App):" >> main.py
          echo "    def build(self):" >> main.py
          echo "        # Replace this with your actual Kivy app UI" >> main.py
          echo "        return Label(text='Food Finder App (Kivy)')" >> main.py
          echo "" >> main.py
          echo "if __name__ == '__main__':" >> main.py
          echo "    FoodFinderApp().run()" >> main.py
        fi
    
    - name: Clean previous build artifacts
      run: |
        buildozer dist clean || echo "No existing distribution to clean."
    
    - name: Build APK
      env:
        TOGETHER_API_KEY: ${{ secrets.TOGETHER_API_KEY }}
        ANDROID_HOME: ~/.buildozer/android/platform
        JAVA_HOME: /usr/lib/jvm/java-11-openjdk-amd64
        PATH: $PATH:$ANDROID_HOME/cmdline-tools/latest/bin:/usr/bin:/home/runner/.local/bin:/usr/lib/jvm/java-11-openjdk-amd64/bin
        LIBTOOLIZE: /usr/bin/libtoolize
        ACLOCAL: /usr/bin/aclocal
        AUTOMAKE: /usr/bin/automake
        AUTOCONF: /usr/bin/autoconf
      run: |
        # Add local bin to PATH for pyproject-build script
        export PATH="/home/runner/.local/bin:$PATH"
        
        # Verify Java version
        java -version
        
        which git
        git --version
        
        # Let buildozer handle the SDK and NDK installation
        # Use log_level=2 for more detailed output
        buildozer -v android debug log_level=2
    
    - name: Check for APK
      run: |
        if [ -z "$(find bin -name '*.apk' 2>/dev/null)" ]; then
          echo "APK file not found!"
          ls -la bin/ || echo "bin directory does not exist"
          # Check buildozer logs for errors
          echo "--- Last 50 lines of buildozer log ---"
          tail -n 50 .buildozer/logs/buildozer.log || echo "Could not read buildozer log."
          exit 1
        else
          echo "APK file found:"
          find bin -name "*.apk"
        fi
    
    - name: Upload APK
      uses: actions/upload-artifact@v4
      with:
        name: app-debug
        path: bin/*.apk

    - name: Upload Buildozer logs on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: buildozer-logs
        path: .buildozer/logs/ 